========================
Installation (out-dated)
========================
Installing the development environment is an easy process, that goes through multiple steps:

* Setting up the OS environment
* (Optional) Setting up a developer environment
* Installing project dependencies
* Setting up the project
* (Optional) Utilize PostgreSQL instead of SQLite3

Each of these is treated in sequence below.

**NOTE**
For the brave (or foolhardy), there's an automated setup:

.. code:: bash

    ./tools/gen_setup.sh | bash

Setting up the OS environment
-----------------------------

    Several software packages are required to bootstrap the setup project, and
    should be acquired using the operating system package manager:

        * gettext
        * git
        * pip
        * python2.7

    Under debian_ this can be done using:

    .. SETUP_INSTRUCTION_OS
    .. code:: bash

        $ sudo apt-get update
        $ sudo apt-get install -y git git-flow python2.7 python-pip python-dev gettext
        $ sudo pip install --upgrade pip

    .. SETUP_INSTRUCTION_END

    .. _debian: https://www.debian.org/

Setting up a developer environment
----------------------------------

    While it is not strictly required to setup a virtual environment for
    development, it is strongly recommended.

    The below describes how to setup a virtual environment using virtualenv_

    .. _virtualenv: https://virtualenv.pypa.io/en/stable/

    .. SETUP_INSTRUCTION_DEVELOPER_ENVIRONMENT
    .. code:: bash

        $ sudo -H pip install virtualenv
        $ virtualenv --python=python2.7 ~/venv

    .. SETUP_INSTRUCTION_END

    The environment can be activated by running:

    .. SETUP_INSTRUCTION_ACTIVATE_DEVELOPER_ENVIRONMENT
    .. code:: bash
        
        $ source ~/venv/bin/activate
        (venv) $ echo "The prefix (venv) states that the environment is active"

    .. SETUP_INSTRUCTION_END

    And deactivated by running:

    .. code:: bash
        
        (venv) $ deactivate
        $ echo "The prefix (venv) is now gone"

Installing project dependencies
-------------------------------

    To install the required dependencies, run:

    .. SETUP_INSTRUCTION_INSTALLING_DEPENDENCIES
    .. code:: bash

        (venv) $ pip install -r requirements.txt

    .. SETUP_INSTRUCTION_END

Setting up the project
----------------------

    The project needs a machine-specific `settings.py` file to run.
    While you may need to adjust some settings, a reasonable default file can be generated by running:

    .. SETUP_INSTRUCTION_GENERATING_SETTINGS_PY
    .. code:: bash

        (venv) $ ./tools/gen_settings.sh
        Default 'heimdall/settings.py' generated

    .. SETUP_INSTRUCTION_END

    Now the project is well-configured, and we can generate our database using:

    .. SETUP_INSTRUCTION_MIGRATING_DATABASE
    .. code:: bash

        (venv) $ python manage.py makemigrations

        Migrations for 'webapp':
          webapp/migrations/0001_initial.py
            - Create model Address
            - Create model ApplicationInvite
        ...

        (venv) $ python manage.py migrate

        Operations to perform:
          Apply all migrations: admin, adminapp, auth, contenttypes, sessions, webapp
        Running migrations:
          Applying contenttypes.0001_initial... OK
        ...

    .. SETUP_INSTRUCTION_END

    At this point the setup is done and ready to go:

    .. code:: bash

        (venv) $ ./runtests.sh

    Now before contributing one should setup git-flow:

    .. code:: bash
        
        (venv) $ ./tools/setup_flow.sh

Utilizing PostgreSQL
--------------------

    The default configuration as presented above, setups the project to utilize
    the django default SQLite3 database. This database is very well suited for
    local development, but is not suited for production environments.

    To switch to PostgreSQL run: :code:`./tools/setup_postgres.sh` (for more
    details, see: :ref:`tools/setup_postgres.sh`).

    .. code:: console

        $ ./tools/setup_postgres.sh

        OK

    At this point the project itself is setup to utilize the PostgreSQL server,
    however we still need to get a server running. This can be achieved using
    the custom :code:`manage.py` command:
    :code:`python manage.py postgres start` (for more details, see:
    :ref:`core.management.commands.postgres`).

    .. code:: console

        $ python manage.py postgres start

        Postgres started!
