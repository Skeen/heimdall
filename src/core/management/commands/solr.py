# pylint: disable=W9903
"""Commands from controlling Solr."""
import os
import time
import errno

from core.management import util

from core.management.DockerService import DockerService
from core.management.ServiceCommand import ServiceCommand


class Command(DockerService, ServiceCommand):
    r"""Commands for controlling Solr.

    Examples:

        Starting the message queue:

        .. code:: console

            $ python manage.py solr start

            Solr started!

        Stopping the message queue:

        .. code:: console

            $ python manage.py solr stop

            Solr stopped!

        Getting message queue status:

        .. code:: console

            $ python manage.py solr status

            Solr is (not) running

        Getting message queue log:

        .. code:: console

            $ python manage.py solr log

              ___      _       Welcome to Apache Solr(tm) version 6.5.1
             / __| ___| |_ _   Starting in standalone mode on port 8983
             \__ \/ _ \ | '_|  Install dir: /opt/solr
             |___/\___/_|_|    Start time: 2017-06-12T12:51:47.248Z

            ...

    Note:

        A running docker daemon is required to run the above commands.

        Installing docker can be done by following the guides present at:

        * https://docs.docker.com/engine/installation/
    """

    def _setup_volumes(self):
        # Setup path to our database
        # pylint: disable=no-name-in-module
        from heimdall.settings import BASE_DIR
        solr_folder = BASE_DIR + '/database/solr/'

        # Create database folder
        if not os.path.exists(solr_folder):
            os.makedirs(solr_folder)

        # Bind volumes
        self.volumes = {
            solr_folder: {
                'bind': '/srv/',
                'mode': 'rw'
            },
        }

    # pylint: disable=no-self-use
    def _generate_schema(self):
        # Generate a new schema
        # pylint: disable=no-name-in-module
        from heimdall.settings import BASE_DIR
        solr_schema = BASE_DIR + '/database/solr/schema.xml'

        from django.core.management import call_command
        with open(solr_schema, "w") as schema_file:
            call_command('build_solr_schema', stdout=schema_file)

    def __init__(self):
        super(Command, self).__init__()
        self._setup_volumes()

    def setup_settings(self, container, portmap):
        print "Writing Solr configuration to settings.py"

        # Server port
        port = portmap['8983/tcp'][0]['HostPort']
        self.host = '127.0.0.1:' + str(port)
        print "Solr running on port: " + port

        # Setup path to our database
        # pylint: disable=no-name-in-module
        from heimdall.settings import BASE_DIR
        settings_file = (
            BASE_DIR + '/heimdall/settings/components/searching.py'
        )

        with open(settings_file, "w") as settings:
            lines = [
                "# Autogenerated",
                '"""Configuration specific searching settings."""',
                "",
                "# Haystack Solr configuration",
                "#----------------------------",
                "HAYSTACK_SIGNAL_PROCESSOR = 'adminapp.processor.ModelSignalProcessor'",  # pylint: disable=line-too-long
                "",
                "HAYSTACK_CONNECTIONS = {",
                "    'default': {",
                "# HOST is not required by haystack, but required for solr.py",
                "        'HOST': '127.0.0.1:" + str(port) + "',",
                "        'ENGINE': 'haystack.backends.solr_backend.SolrEngine',",  # pylint: disable=line-too-long
                "        'URL': 'http://127.0.0.1:" + str(port) + "/solr/heimdall/',",  # pylint: disable=line-too-long
                "        'TIMEOUT': 60*10,",
                "    }",
                "}",
            ]
            for line in lines:
                settings.write(line + '\n')

    def start(self):
        # pylint: disable=no-name-in-module
        from heimdall.settings import HAYSTACK_CONNECTIONS
        if (HAYSTACK_CONNECTIONS['default']['ENGINE'] ==
                'haystack.backends.solr_backend.SolrEngine'):
            print "Warning: Project, already configured to use Solr"
            print "Warning: Overriding current configuration!"

        super(Command, self).start()

        if self.host is None:
            self.host = HAYSTACK_CONNECTIONS['default']['HOST']

        # Wait for solr to come online
        while util.get_status_code(self.host, "/solr/") != 200:
            time.sleep(1)
        print "Solr online"
        print ""
        print "You may want to rebuild the schema now, using:"
        print "python manage.py solr rebuild_schema"

    def stop(self, identifier):
        # pylint: disable=no-name-in-module
        from heimdall.settings import BASE_DIR
        settings_file = (
            BASE_DIR + '/heimdall/settings/components/searching.py'
        )
        try:
            os.remove(settings_file)
        except OSError as exception:
            # If the exception wasn't a file not found, rethrow it
            if exception.errno != errno.ENOENT:
                raise
        super(Command, self).stop(identifier)

    def rebuild_schema(self, identifier):
        """Rebuild the Solr schema and index.

        This should be called immedately after starting solr, and on index
        changes.
        """
        # pylint: disable=no-name-in-module
        from heimdall.settings import HAYSTACK_CONNECTIONS
        # Prepare the rebuild task
        container = self.get_container(identifier)

        if self.host is None:
            self.host = HAYSTACK_CONNECTIONS['default']['HOST']

        # Create our collection core
        container.exec_run(
            ["bin/solr", "create_core", "-c", "heimdall"],
            user='solr'
        )

        # Generate the schema
        self._generate_schema()

        # Push the schema into the docker
        container.exec_run(
            ["cp", "/srv/schema.xml",
             "/opt/solr/server/solr/heimdall/conf/managed-schema"],
            user='solr'
        )

        # Notify the solr about the new schema
        status = util.get_status_code(
            self.host,
            "/solr/admin/cores?action=RELOAD&core=heimdall"
        )
        if status != 200:
            print "Error: Could not reload schema file."

        # Rebuild the indexes
        from django.core.management import call_command
        call_command('rebuild_index', '--noinput')

    # This variable is intentionally None and should remain None forever.
    host = None

    service_name = 'Solr'
    help = 'Control the solr search engine'

    image = 'solr:6.5'
    ports = {
        '8983/tcp': 8983,
    }
    custom_commands = ["rebuild_schema"]
